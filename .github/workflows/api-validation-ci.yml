name: ðŸ”— API Validation CI

on:
  push:
    branches: [ master, main ]
    paths:
      - 'workflow-platform/**'
      - 'frontend/**'
      - '.github/workflows/api-validation-ci.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'workflow-platform/**'
      - 'frontend/**'

jobs:
  api-validation:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: workflow_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    defaults:
      run:
        working-directory: workflow-platform

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('workflow-platform/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Create test environment file
      run: |
        cp .env.example .env
        echo "DEBUG=true" >> .env
        echo "TEST_DATABASE_URL=postgresql+asyncpg://postgres:password@localhost:5432/workflow_platform_test" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        echo "JWT_SECRET_KEY=test-secret-key-for-ci-validation" >> .env
        echo "JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15" >> .env
        echo "BCRYPT_ROUNDS=4" >> .env
    
    - name: Run Profile API Fix Tests
      run: |
        python -m pytest tests/integration/user_management/test_profile_api_fix.py -v --tb=short
    
    - name: Run Complete User API Tests  
      run: |
        python -m pytest tests/integration/user_management/test_user_api.py::TestUserAPI::test_profile_management -v --tb=short
    
    - name: Generate API Test Coverage
      run: |
        python -m pytest tests/integration/user_management/ \
          --cov=bounded_contexts.user_management \
          --cov=api_gateway \
          --cov-report=xml \
          --cov-report=term-missing